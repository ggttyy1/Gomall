// Code generated by Kitex v0.9.1. DO NOT EDIT.

package personinfor

import (
	"context"
	"errors"
	person_infor "github.com/cloudwego/biz-demo/gomall/rpc_gen/kitex_gen/person_infor"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"RegisterPersonInfo": kitex.NewMethodInfo(
		registerPersonInfoHandler,
		newRegisterPersonInfoArgs,
		newRegisterPersonInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetPersonInfoList": kitex.NewMethodInfo(
		getPersonInfoListHandler,
		newGetPersonInfoListArgs,
		newGetPersonInfoListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetPersonInfo": kitex.NewMethodInfo(
		getPersonInfoHandler,
		newGetPersonInfoArgs,
		newGetPersonInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdatePersonInfo": kitex.NewMethodInfo(
		updatePersonInfoHandler,
		newUpdatePersonInfoArgs,
		newUpdatePersonInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeletePersonInfo": kitex.NewMethodInfo(
		deletePersonInfoHandler,
		newDeletePersonInfoArgs,
		newDeletePersonInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	personInforServiceInfo                = NewServiceInfo()
	personInforServiceInfoForClient       = NewServiceInfoForClient()
	personInforServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return personInforServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return personInforServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return personInforServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PersonInfor"
	handlerType := (*person_infor.PersonInfor)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "person_infor",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerPersonInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(person_infor.PersonReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(person_infor.PersonInfor).RegisterPersonInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterPersonInfoArgs:
		success, err := handler.(person_infor.PersonInfor).RegisterPersonInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterPersonInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterPersonInfoArgs() interface{} {
	return &RegisterPersonInfoArgs{}
}

func newRegisterPersonInfoResult() interface{} {
	return &RegisterPersonInfoResult{}
}

type RegisterPersonInfoArgs struct {
	Req *person_infor.PersonReq
}

func (p *RegisterPersonInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(person_infor.PersonReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterPersonInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterPersonInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterPersonInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterPersonInfoArgs) Unmarshal(in []byte) error {
	msg := new(person_infor.PersonReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterPersonInfoArgs_Req_DEFAULT *person_infor.PersonReq

func (p *RegisterPersonInfoArgs) GetReq() *person_infor.PersonReq {
	if !p.IsSetReq() {
		return RegisterPersonInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterPersonInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterPersonInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterPersonInfoResult struct {
	Success *person_infor.PersonResp
}

var RegisterPersonInfoResult_Success_DEFAULT *person_infor.PersonResp

func (p *RegisterPersonInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(person_infor.PersonResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterPersonInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterPersonInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterPersonInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterPersonInfoResult) Unmarshal(in []byte) error {
	msg := new(person_infor.PersonResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterPersonInfoResult) GetSuccess() *person_infor.PersonResp {
	if !p.IsSetSuccess() {
		return RegisterPersonInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterPersonInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*person_infor.PersonResp)
}

func (p *RegisterPersonInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterPersonInfoResult) GetResult() interface{} {
	return p.Success
}

func getPersonInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(person_infor.GetPersonInfoListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(person_infor.PersonInfor).GetPersonInfoList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetPersonInfoListArgs:
		success, err := handler.(person_infor.PersonInfor).GetPersonInfoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPersonInfoListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetPersonInfoListArgs() interface{} {
	return &GetPersonInfoListArgs{}
}

func newGetPersonInfoListResult() interface{} {
	return &GetPersonInfoListResult{}
}

type GetPersonInfoListArgs struct {
	Req *person_infor.GetPersonInfoListReq
}

func (p *GetPersonInfoListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(person_infor.GetPersonInfoListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPersonInfoListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPersonInfoListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPersonInfoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPersonInfoListArgs) Unmarshal(in []byte) error {
	msg := new(person_infor.GetPersonInfoListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPersonInfoListArgs_Req_DEFAULT *person_infor.GetPersonInfoListReq

func (p *GetPersonInfoListArgs) GetReq() *person_infor.GetPersonInfoListReq {
	if !p.IsSetReq() {
		return GetPersonInfoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPersonInfoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPersonInfoListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPersonInfoListResult struct {
	Success *person_infor.GetPersonInfoListResp
}

var GetPersonInfoListResult_Success_DEFAULT *person_infor.GetPersonInfoListResp

func (p *GetPersonInfoListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(person_infor.GetPersonInfoListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPersonInfoListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPersonInfoListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPersonInfoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPersonInfoListResult) Unmarshal(in []byte) error {
	msg := new(person_infor.GetPersonInfoListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPersonInfoListResult) GetSuccess() *person_infor.GetPersonInfoListResp {
	if !p.IsSetSuccess() {
		return GetPersonInfoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPersonInfoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*person_infor.GetPersonInfoListResp)
}

func (p *GetPersonInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPersonInfoListResult) GetResult() interface{} {
	return p.Success
}

func getPersonInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(person_infor.GetPersonInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(person_infor.PersonInfor).GetPersonInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetPersonInfoArgs:
		success, err := handler.(person_infor.PersonInfor).GetPersonInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPersonInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetPersonInfoArgs() interface{} {
	return &GetPersonInfoArgs{}
}

func newGetPersonInfoResult() interface{} {
	return &GetPersonInfoResult{}
}

type GetPersonInfoArgs struct {
	Req *person_infor.GetPersonInfoReq
}

func (p *GetPersonInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(person_infor.GetPersonInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPersonInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPersonInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPersonInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPersonInfoArgs) Unmarshal(in []byte) error {
	msg := new(person_infor.GetPersonInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPersonInfoArgs_Req_DEFAULT *person_infor.GetPersonInfoReq

func (p *GetPersonInfoArgs) GetReq() *person_infor.GetPersonInfoReq {
	if !p.IsSetReq() {
		return GetPersonInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPersonInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPersonInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPersonInfoResult struct {
	Success *person_infor.GetPersonInfoResp
}

var GetPersonInfoResult_Success_DEFAULT *person_infor.GetPersonInfoResp

func (p *GetPersonInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(person_infor.GetPersonInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPersonInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPersonInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPersonInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPersonInfoResult) Unmarshal(in []byte) error {
	msg := new(person_infor.GetPersonInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPersonInfoResult) GetSuccess() *person_infor.GetPersonInfoResp {
	if !p.IsSetSuccess() {
		return GetPersonInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPersonInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*person_infor.GetPersonInfoResp)
}

func (p *GetPersonInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPersonInfoResult) GetResult() interface{} {
	return p.Success
}

func updatePersonInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(person_infor.UpdatePersonInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(person_infor.PersonInfor).UpdatePersonInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdatePersonInfoArgs:
		success, err := handler.(person_infor.PersonInfor).UpdatePersonInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePersonInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdatePersonInfoArgs() interface{} {
	return &UpdatePersonInfoArgs{}
}

func newUpdatePersonInfoResult() interface{} {
	return &UpdatePersonInfoResult{}
}

type UpdatePersonInfoArgs struct {
	Req *person_infor.UpdatePersonInfoReq
}

func (p *UpdatePersonInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(person_infor.UpdatePersonInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePersonInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePersonInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePersonInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePersonInfoArgs) Unmarshal(in []byte) error {
	msg := new(person_infor.UpdatePersonInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePersonInfoArgs_Req_DEFAULT *person_infor.UpdatePersonInfoReq

func (p *UpdatePersonInfoArgs) GetReq() *person_infor.UpdatePersonInfoReq {
	if !p.IsSetReq() {
		return UpdatePersonInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePersonInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePersonInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePersonInfoResult struct {
	Success *person_infor.UpdatePersonInfoResp
}

var UpdatePersonInfoResult_Success_DEFAULT *person_infor.UpdatePersonInfoResp

func (p *UpdatePersonInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(person_infor.UpdatePersonInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePersonInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePersonInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePersonInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePersonInfoResult) Unmarshal(in []byte) error {
	msg := new(person_infor.UpdatePersonInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePersonInfoResult) GetSuccess() *person_infor.UpdatePersonInfoResp {
	if !p.IsSetSuccess() {
		return UpdatePersonInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePersonInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*person_infor.UpdatePersonInfoResp)
}

func (p *UpdatePersonInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePersonInfoResult) GetResult() interface{} {
	return p.Success
}

func deletePersonInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(person_infor.DeletePersonInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(person_infor.PersonInfor).DeletePersonInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeletePersonInfoArgs:
		success, err := handler.(person_infor.PersonInfor).DeletePersonInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeletePersonInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeletePersonInfoArgs() interface{} {
	return &DeletePersonInfoArgs{}
}

func newDeletePersonInfoResult() interface{} {
	return &DeletePersonInfoResult{}
}

type DeletePersonInfoArgs struct {
	Req *person_infor.DeletePersonInfoReq
}

func (p *DeletePersonInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(person_infor.DeletePersonInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeletePersonInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeletePersonInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeletePersonInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeletePersonInfoArgs) Unmarshal(in []byte) error {
	msg := new(person_infor.DeletePersonInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeletePersonInfoArgs_Req_DEFAULT *person_infor.DeletePersonInfoReq

func (p *DeletePersonInfoArgs) GetReq() *person_infor.DeletePersonInfoReq {
	if !p.IsSetReq() {
		return DeletePersonInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeletePersonInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeletePersonInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeletePersonInfoResult struct {
	Success *person_infor.DeletePersonInfoResp
}

var DeletePersonInfoResult_Success_DEFAULT *person_infor.DeletePersonInfoResp

func (p *DeletePersonInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(person_infor.DeletePersonInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeletePersonInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeletePersonInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeletePersonInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeletePersonInfoResult) Unmarshal(in []byte) error {
	msg := new(person_infor.DeletePersonInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeletePersonInfoResult) GetSuccess() *person_infor.DeletePersonInfoResp {
	if !p.IsSetSuccess() {
		return DeletePersonInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeletePersonInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*person_infor.DeletePersonInfoResp)
}

func (p *DeletePersonInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePersonInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegisterPersonInfo(ctx context.Context, Req *person_infor.PersonReq) (r *person_infor.PersonResp, err error) {
	var _args RegisterPersonInfoArgs
	_args.Req = Req
	var _result RegisterPersonInfoResult
	if err = p.c.Call(ctx, "RegisterPersonInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPersonInfoList(ctx context.Context, Req *person_infor.GetPersonInfoListReq) (r *person_infor.GetPersonInfoListResp, err error) {
	var _args GetPersonInfoListArgs
	_args.Req = Req
	var _result GetPersonInfoListResult
	if err = p.c.Call(ctx, "GetPersonInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPersonInfo(ctx context.Context, Req *person_infor.GetPersonInfoReq) (r *person_infor.GetPersonInfoResp, err error) {
	var _args GetPersonInfoArgs
	_args.Req = Req
	var _result GetPersonInfoResult
	if err = p.c.Call(ctx, "GetPersonInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePersonInfo(ctx context.Context, Req *person_infor.UpdatePersonInfoReq) (r *person_infor.UpdatePersonInfoResp, err error) {
	var _args UpdatePersonInfoArgs
	_args.Req = Req
	var _result UpdatePersonInfoResult
	if err = p.c.Call(ctx, "UpdatePersonInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePersonInfo(ctx context.Context, Req *person_infor.DeletePersonInfoReq) (r *person_infor.DeletePersonInfoResp, err error) {
	var _args DeletePersonInfoArgs
	_args.Req = Req
	var _result DeletePersonInfoResult
	if err = p.c.Call(ctx, "DeletePersonInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
