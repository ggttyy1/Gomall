// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package person_infor

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Address) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Address[number], err)
}

func (x *Address) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StreetAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.City, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Country, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ZipCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreditCardInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreditCardInfo[number], err)
}

func (x *CreditCardInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CreditCardNum, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreditCardInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreitCardCvv, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreditCardInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CreditCartExpirationYear, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreditCardInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CreditCartExpirationMonth, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PersonReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PersonReq[number], err)
}

func (x *PersonReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *PersonReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Address
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Address = &v
	return offset, nil
}

func (x *PersonReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FirstName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.LastName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v CreditCardInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CreditCardInfo = &v
	return offset, nil
}

func (x *UpdatePersonInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePersonInfoReq[number], err)
}

func (x *UpdatePersonInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdatePersonInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Address
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Address = &v
	return offset, nil
}

func (x *UpdatePersonInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePersonInfoReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FirstName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePersonInfoReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.LastName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePersonInfoReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v CreditCardInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CreditCardInfo = &v
	return offset, nil
}

func (x *UpdatePersonInfoReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.PersonInfoId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdatePersonInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *PersonResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetPersonInfoListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonInfoListReq[number], err)
}

func (x *GetPersonInfoListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *PersonInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PersonInfo[number], err)
}

func (x *PersonInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FirstName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.LastName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PersonInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Address
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Address = &v
	return offset, nil
}

func (x *PersonInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v CreditCardInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CreditCardInfo = &v
	return offset, nil
}

func (x *PersonInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.PersonInfoId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetPersonInfoListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonInfoListResp[number], err)
}

func (x *GetPersonInfoListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PersonInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PersonInfo = append(x.PersonInfo, &v)
	return offset, nil
}

func (x *GetPersonInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonInfoReq[number], err)
}

func (x *GetPersonInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PersonInfoId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetPersonInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonInfoResp[number], err)
}

func (x *GetPersonInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PersonInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PersonInfo = &v
	return offset, nil
}

func (x *DeletePersonInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePersonInfoReq[number], err)
}

func (x *DeletePersonInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PersonInfoId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *DeletePersonInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *Address) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Address) fastWriteField1(buf []byte) (offset int) {
	if x.StreetAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetStreetAddress())
	return offset
}

func (x *Address) fastWriteField2(buf []byte) (offset int) {
	if x.City == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCity())
	return offset
}

func (x *Address) fastWriteField3(buf []byte) (offset int) {
	if x.State == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetState())
	return offset
}

func (x *Address) fastWriteField4(buf []byte) (offset int) {
	if x.Country == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCountry())
	return offset
}

func (x *Address) fastWriteField5(buf []byte) (offset int) {
	if x.ZipCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetZipCode())
	return offset
}

func (x *CreditCardInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CreditCardInfo) fastWriteField1(buf []byte) (offset int) {
	if x.CreditCardNum == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCreditCardNum())
	return offset
}

func (x *CreditCardInfo) fastWriteField2(buf []byte) (offset int) {
	if x.CreitCardCvv == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetCreitCardCvv())
	return offset
}

func (x *CreditCardInfo) fastWriteField3(buf []byte) (offset int) {
	if x.CreditCartExpirationYear == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetCreditCartExpirationYear())
	return offset
}

func (x *CreditCardInfo) fastWriteField4(buf []byte) (offset int) {
	if x.CreditCartExpirationMonth == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetCreditCartExpirationMonth())
	return offset
}

func (x *PersonReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *PersonReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *PersonReq) fastWriteField2(buf []byte) (offset int) {
	if x.Address == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAddress())
	return offset
}

func (x *PersonReq) fastWriteField3(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEmail())
	return offset
}

func (x *PersonReq) fastWriteField4(buf []byte) (offset int) {
	if x.FirstName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFirstName())
	return offset
}

func (x *PersonReq) fastWriteField5(buf []byte) (offset int) {
	if x.LastName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetLastName())
	return offset
}

func (x *PersonReq) fastWriteField6(buf []byte) (offset int) {
	if x.CreditCardInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetCreditCardInfo())
	return offset
}

func (x *UpdatePersonInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.Address == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAddress())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEmail())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField4(buf []byte) (offset int) {
	if x.FirstName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFirstName())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField5(buf []byte) (offset int) {
	if x.LastName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetLastName())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField6(buf []byte) (offset int) {
	if x.CreditCardInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetCreditCardInfo())
	return offset
}

func (x *UpdatePersonInfoReq) fastWriteField7(buf []byte) (offset int) {
	if x.PersonInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 7, x.GetPersonInfoId())
	return offset
}

func (x *UpdatePersonInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *PersonResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetPersonInfoListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPersonInfoListReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *PersonInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *PersonInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FirstName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFirstName())
	return offset
}

func (x *PersonInfo) fastWriteField2(buf []byte) (offset int) {
	if x.LastName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLastName())
	return offset
}

func (x *PersonInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEmail())
	return offset
}

func (x *PersonInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Address == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetAddress())
	return offset
}

func (x *PersonInfo) fastWriteField5(buf []byte) (offset int) {
	if x.CreditCardInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetCreditCardInfo())
	return offset
}

func (x *PersonInfo) fastWriteField6(buf []byte) (offset int) {
	if x.PersonInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 6, x.GetPersonInfoId())
	return offset
}

func (x *GetPersonInfoListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPersonInfoListResp) fastWriteField1(buf []byte) (offset int) {
	if x.PersonInfo == nil {
		return offset
	}
	for i := range x.GetPersonInfo() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPersonInfo()[i])
	}
	return offset
}

func (x *GetPersonInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPersonInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.PersonInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetPersonInfoId())
	return offset
}

func (x *GetPersonInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPersonInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.PersonInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPersonInfo())
	return offset
}

func (x *DeletePersonInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePersonInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.PersonInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetPersonInfoId())
	return offset
}

func (x *DeletePersonInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *Address) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Address) sizeField1() (n int) {
	if x.StreetAddress == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetStreetAddress())
	return n
}

func (x *Address) sizeField2() (n int) {
	if x.City == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCity())
	return n
}

func (x *Address) sizeField3() (n int) {
	if x.State == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetState())
	return n
}

func (x *Address) sizeField4() (n int) {
	if x.Country == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCountry())
	return n
}

func (x *Address) sizeField5() (n int) {
	if x.ZipCode == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetZipCode())
	return n
}

func (x *CreditCardInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CreditCardInfo) sizeField1() (n int) {
	if x.CreditCardNum == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCreditCardNum())
	return n
}

func (x *CreditCardInfo) sizeField2() (n int) {
	if x.CreitCardCvv == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetCreitCardCvv())
	return n
}

func (x *CreditCardInfo) sizeField3() (n int) {
	if x.CreditCartExpirationYear == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetCreditCartExpirationYear())
	return n
}

func (x *CreditCardInfo) sizeField4() (n int) {
	if x.CreditCartExpirationMonth == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetCreditCartExpirationMonth())
	return n
}

func (x *PersonReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *PersonReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *PersonReq) sizeField2() (n int) {
	if x.Address == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAddress())
	return n
}

func (x *PersonReq) sizeField3() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEmail())
	return n
}

func (x *PersonReq) sizeField4() (n int) {
	if x.FirstName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFirstName())
	return n
}

func (x *PersonReq) sizeField5() (n int) {
	if x.LastName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetLastName())
	return n
}

func (x *PersonReq) sizeField6() (n int) {
	if x.CreditCardInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetCreditCardInfo())
	return n
}

func (x *UpdatePersonInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UpdatePersonInfoReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *UpdatePersonInfoReq) sizeField2() (n int) {
	if x.Address == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAddress())
	return n
}

func (x *UpdatePersonInfoReq) sizeField3() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEmail())
	return n
}

func (x *UpdatePersonInfoReq) sizeField4() (n int) {
	if x.FirstName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFirstName())
	return n
}

func (x *UpdatePersonInfoReq) sizeField5() (n int) {
	if x.LastName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetLastName())
	return n
}

func (x *UpdatePersonInfoReq) sizeField6() (n int) {
	if x.CreditCardInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetCreditCardInfo())
	return n
}

func (x *UpdatePersonInfoReq) sizeField7() (n int) {
	if x.PersonInfoId == 0 {
		return n
	}
	n += fastpb.SizeUint32(7, x.GetPersonInfoId())
	return n
}

func (x *UpdatePersonInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *PersonResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetPersonInfoListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPersonInfoListReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *PersonInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *PersonInfo) sizeField1() (n int) {
	if x.FirstName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFirstName())
	return n
}

func (x *PersonInfo) sizeField2() (n int) {
	if x.LastName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetLastName())
	return n
}

func (x *PersonInfo) sizeField3() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEmail())
	return n
}

func (x *PersonInfo) sizeField4() (n int) {
	if x.Address == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetAddress())
	return n
}

func (x *PersonInfo) sizeField5() (n int) {
	if x.CreditCardInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetCreditCardInfo())
	return n
}

func (x *PersonInfo) sizeField6() (n int) {
	if x.PersonInfoId == 0 {
		return n
	}
	n += fastpb.SizeUint32(6, x.GetPersonInfoId())
	return n
}

func (x *GetPersonInfoListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPersonInfoListResp) sizeField1() (n int) {
	if x.PersonInfo == nil {
		return n
	}
	for i := range x.GetPersonInfo() {
		n += fastpb.SizeMessage(1, x.GetPersonInfo()[i])
	}
	return n
}

func (x *GetPersonInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	return n
}

func (x *GetPersonInfoReq) sizeField2() (n int) {
	if x.PersonInfoId == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetPersonInfoId())
	return n
}

func (x *GetPersonInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPersonInfoResp) sizeField1() (n int) {
	if x.PersonInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPersonInfo())
	return n
}

func (x *DeletePersonInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePersonInfoReq) sizeField1() (n int) {
	if x.PersonInfoId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetPersonInfoId())
	return n
}

func (x *DeletePersonInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_Address = map[int32]string{
	1: "StreetAddress",
	2: "City",
	3: "State",
	4: "Country",
	5: "ZipCode",
}

var fieldIDToName_CreditCardInfo = map[int32]string{
	1: "CreditCardNum",
	2: "CreitCardCvv",
	3: "CreditCartExpirationYear",
	4: "CreditCartExpirationMonth",
}

var fieldIDToName_PersonReq = map[int32]string{
	1: "UserId",
	2: "Address",
	3: "Email",
	4: "FirstName",
	5: "LastName",
	6: "CreditCardInfo",
}

var fieldIDToName_UpdatePersonInfoReq = map[int32]string{
	1: "UserId",
	2: "Address",
	3: "Email",
	4: "FirstName",
	5: "LastName",
	6: "CreditCardInfo",
	7: "PersonInfoId",
}

var fieldIDToName_UpdatePersonInfoResp = map[int32]string{}

var fieldIDToName_PersonResp = map[int32]string{}

var fieldIDToName_GetPersonInfoListReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_PersonInfo = map[int32]string{
	1: "FirstName",
	2: "LastName",
	3: "Email",
	4: "Address",
	5: "CreditCardInfo",
	6: "PersonInfoId",
}

var fieldIDToName_GetPersonInfoListResp = map[int32]string{
	1: "PersonInfo",
}

var fieldIDToName_GetPersonInfoReq = map[int32]string{
	2: "PersonInfoId",
}

var fieldIDToName_GetPersonInfoResp = map[int32]string{
	1: "PersonInfo",
}

var fieldIDToName_DeletePersonInfoReq = map[int32]string{
	1: "PersonInfoId",
}

var fieldIDToName_DeletePersonInfoResp = map[int32]string{}
